{
  "stats": {
    "suites": 18,
    "tests": 61,
    "passes": 61,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-16T17:26:38.000Z",
    "end": "2024-07-16T17:27:20.041Z",
    "duration": 42041,
    "testsRegistered": 61,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "856487ba-febb-45c0-ae45-8064992ac4f4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b7056ac8-4851-4ed5-a0cb-c5dbe148b573",
          "title": "Tests for the Ollama backend REST API endpoints",
          "fullFile": "/usr/src/app/server/test/app.test.js",
          "file": "/test/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer = server.app.listen(done);\nrequest = supertest.agent(testServer);",
              "err": {},
              "uuid": "ce8d0a8d-5879-4788-8c5f-eaedb8ba4c8c",
              "parentUUID": "b7056ac8-4851-4ed5-a0cb-c5dbe148b573",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer.close(done);",
              "err": {},
              "uuid": "6b9be93b-fe66-45aa-8b7c-e3ecfd5cc6aa",
              "parentUUID": "b7056ac8-4851-4ed5-a0cb-c5dbe148b573",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7c0d001c-4b8b-4631-bfa1-6bb0a0582139",
              "title": "Testing the POST endpoint for /code",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing a regular description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Providing a regular description",
                  "timedOut": false,
                  "duration": 10076,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request\n.post('/code')\n.send(two_sum_fn_desc)\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body.llm_code).to.not.equal(null);\n    expect(res.body.llm_code).to.match(/return [\\w]+ \\+ [\\w]+/);\n    expect(res.body.llm_code).to.match(/function [\\w]+\\([\\w]+\\,[\\s]*[\\w]+\\)/);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "d813538f-b769-43b2-a145-fd245e77c8a4",
                  "parentUUID": "7c0d001c-4b8b-4631-bfa1-6bb0a0582139",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not providing a body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Not providing a body",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/code')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "1a5736da-efe2-4095-831e-125edc222610",
                  "parentUUID": "7c0d001c-4b8b-4631-bfa1-6bb0a0582139",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d813538f-b769-43b2-a145-fd245e77c8a4",
                "1a5736da-efe2-4095-831e-125edc222610"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10079,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "69f3f583-7abe-49fb-a7a7-b94a425cb2c5",
              "title": "Testing the POST endpoint for /grade",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing random description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing random description",
                  "timedOut": false,
                  "duration": 8920,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"blah\", \"user_id\": \"75043986\"})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].score).to.equal(0);\n    expect(res.body.results[1].score).to.equal(0);\n    expect(res.body.results[2].score).to.equal(0);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "3bd933c9-a36a-42d2-8721-5a26d06a74e6",
                  "parentUUID": "69f3f583-7abe-49fb-a7a7-b94a425cb2c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing bad JSON body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing bad JSON body",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "82025a5d-6502-4928-8ece-5d57d5d39972",
                  "parentUUID": "69f3f583-7abe-49fb-a7a7-b94a425cb2c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing invalid QID",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing invalid QID",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 999, \"llm_code\": \"function foo(a, b) { return a + b; }\", \"user_id\": \"75043986\"})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "8744376b-f22d-40f5-8d70-3ed8c5b31168",
                  "parentUUID": "69f3f583-7abe-49fb-a7a7-b94a425cb2c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing a regular, valid function for grade",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing a regular, valid function for grade",
                  "timedOut": false,
                  "duration": 3977,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"Takes two numbers and adds them together\", \"user_id\": \"75043986\"})\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].score).to.equal(1);\n    expect(res.body.results[1].score).to.equal(1);\n    expect(res.body.results[2].score).to.equal(1);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "b14b0e9f-08c7-4e81-9878-50bac8d3ba39",
                  "parentUUID": "69f3f583-7abe-49fb-a7a7-b94a425cb2c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bd933c9-a36a-42d2-8721-5a26d06a74e6",
                "82025a5d-6502-4928-8ece-5d57d5d39972",
                "8744376b-f22d-40f5-8d70-3ed8c5b31168",
                "b14b0e9f-08c7-4e81-9878-50bac8d3ba39"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12900,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c3c993f1-7abc-4b25-ba16-dd868c1ec7b9",
              "title": "Testing question and unit test GET endpoints",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching question 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/1')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "91ca38ba-8ac3-4862-98e1-005e33b3f89f",
                  "parentUUID": "c3c993f1-7abc-4b25-ba16-dd868c1ec7b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant question",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve the question.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "378ecb48-8530-4a99-abf7-148db4459cc9",
                  "parentUUID": "c3c993f1-7abc-4b25-ba16-dd868c1ec7b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching unit tests for question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching unit tests for question 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/1')\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.length).to.equal(3);\n    expect(res.body[0].desc).to.equal(\"A test to check if adding properly.\");\n    expect(res.body[1].desc).to.equal(\"A less basic test to check if adding properly.\");\n    expect(res.body[2].desc).to.equal(\"Another basic test to check if adding properly.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "6a4ff04f-9b70-49f7-a90d-eac1c7637ae7",
                  "parentUUID": "c3c993f1-7abc-4b25-ba16-dd868c1ec7b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant set of unit tests",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant set of unit tests",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve test cases.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "593e781e-4885-4eae-bea9-baaa057a39ef",
                  "parentUUID": "c3c993f1-7abc-4b25-ba16-dd868c1ec7b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91ca38ba-8ac3-4862-98e1-005e33b3f89f",
                "378ecb48-8530-4a99-abf7-148db4459cc9",
                "6a4ff04f-9b70-49f7-a90d-eac1c7637ae7",
                "593e781e-4885-4eae-bea9-baaa057a39ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d2905482-faa5-4d4e-887b-e080dc7a3ef4",
          "title": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers",
          "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
          "file": "/test/ollama_api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "558228b4-1ddd-4e0d-ab45-0741d799a27f",
              "title": "Testing the GeneratePrompt function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Basic description of a function test",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Basic description of a function test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"hello world\");\nexpect(prompt)\n.to\n.equal(\"Write me a Javascript function that has the following purpose: hello world. Only show me the code and call the function foo.\")",
                  "err": {},
                  "uuid": "d866557e-5755-480e-9adc-5481f7410fbb",
                  "parentUUID": "558228b4-1ddd-4e0d-ab45-0741d799a27f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"\");\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "f854e181-c2a5-47c5-a0d0-376fd9fd7cf5",
                  "parentUUID": "558228b4-1ddd-4e0d-ab45-0741d799a27f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(null);\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "9e39d6d3-0363-4193-b121-149ca95ee955",
                  "parentUUID": "558228b4-1ddd-4e0d-ab45-0741d799a27f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt();\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "c1bcb18e-4b0a-49e1-a751-9bcfdcf8ad37",
                  "parentUUID": "558228b4-1ddd-4e0d-ab45-0741d799a27f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d866557e-5755-480e-9adc-5481f7410fbb",
                "f854e181-c2a5-47c5-a0d0-376fd9fd7cf5",
                "9e39d6d3-0363-4193-b121-149ca95ee955",
                "c1bcb18e-4b0a-49e1-a751-9bcfdcf8ad37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "246b8bb8-5fae-409e-90de-0f5b11114eb7",
              "title": "Testing the ParseResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Regular response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(llm_two_sum_response);\nexpect(resp).to.contain('function foo');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('return a + b');",
                  "err": {},
                  "uuid": "d1c224f7-58ad-4a96-8c5c-556ae35f12e2",
                  "parentUUID": "246b8bb8-5fae-409e-90de-0f5b11114eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing error response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing error response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "36c94105-ebc2-46b1-831c-b23d7aba1bce",
                  "parentUUID": "246b8bb8-5fae-409e-90de-0f5b11114eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "e674e3ff-2fb0-49b2-b297-0bfeda52a74a",
                  "parentUUID": "246b8bb8-5fae-409e-90de-0f5b11114eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing a weird response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing a weird response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(weird_llm_response);\nexpect(resp).to.contain('function');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('toLowerCase');",
                  "err": {},
                  "uuid": "5d9246dd-cf19-4f6b-8e87-5ec194592412",
                  "parentUUID": "246b8bb8-5fae-409e-90de-0f5b11114eb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1c224f7-58ad-4a96-8c5c-556ae35f12e2",
                "36c94105-ebc2-46b1-831c-b23d7aba1bce",
                "e674e3ff-2fb0-49b2-b297-0bfeda52a74a",
                "5d9246dd-cf19-4f6b-8e87-5ec194592412"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "6d444d79-6991-4828-81c0-2ac5c7690522",
              "title": "Testing the FetchResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching response for regular query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for regular query",
                  "timedOut": false,
                  "duration": 6281,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code).to.contain(\"function\");\nexpect(resp.llm_code).to.contain(\"+\");",
                  "err": {},
                  "uuid": "eeb79ab1-aaf8-4ff6-9d79-38f03985072e",
                  "parentUUID": "6d444d79-6991-4828-81c0-2ac5c7690522",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for random query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for random query",
                  "timedOut": false,
                  "duration": 7388,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(\"blah\")\nexpect(resp).to.not.equal(null);",
                  "err": {},
                  "uuid": "0e635126-bea5-4774-9d84-5353b9529e60",
                  "parentUUID": "6d444d79-6991-4828-81c0-2ac5c7690522",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for null query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for null query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "f488cf3f-ebb2-459e-b645-a73c1e042d20",
                  "parentUUID": "6d444d79-6991-4828-81c0-2ac5c7690522",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for missing query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for missing query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "47853fda-11f9-4ea4-82dc-d6a09b52d7fb",
                  "parentUUID": "6d444d79-6991-4828-81c0-2ac5c7690522",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eeb79ab1-aaf8-4ff6-9d79-38f03985072e",
                "0e635126-bea5-4774-9d84-5353b9529e60",
                "f488cf3f-ebb2-459e-b645-a73c1e042d20",
                "47853fda-11f9-4ea4-82dc-d6a09b52d7fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13669,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
              "title": "Testing the isMalicious function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(malicious_fn_desc);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "0ec70d4b-87b7-46c8-96d3-72f1faaaee42",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"for(;;)\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "cae6ed9b-2ee8-458a-ba39-8de623d1bf22",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing safe description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing safe description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(two_sum_fn_desc.desc);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "a69bfd2d-256b-42de-8a3a-e65462152469",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing empty description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing empty description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "03343829-93b9-4795-9012-142bb9e63e65",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing null description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(null);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "cc5e28fa-ecfa-402e-876a-f6e1b12efda9",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing random description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing random description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"my name is Chris\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "60a865a1-ca45-4ea1-8cb0-6b139eef1530",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing undefined description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing undefined description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious();\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "27653b34-84af-45e0-b1ff-60db361d2668",
                  "parentUUID": "b4ac6a12-1fe7-4a00-9f2e-ae7266fec446",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ec70d4b-87b7-46c8-96d3-72f1faaaee42",
                "cae6ed9b-2ee8-458a-ba39-8de623d1bf22",
                "a69bfd2d-256b-42de-8a3a-e65462152469",
                "03343829-93b9-4795-9012-142bb9e63e65",
                "cc5e28fa-ecfa-402e-876a-f6e1b12efda9",
                "60a865a1-ca45-4ea1-8cb0-6b139eef1530",
                "27653b34-84af-45e0-b1ff-60db361d2668"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
              "title": "Testing the TestGeneratedCode function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing a correctly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 1\n})\n\nexpect(res.length).to.equal(3);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].score).to.equal(1);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].score).to.equal(1);\n    \nexpect(res[2].score).to.equal(1);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "7a94ad79-bf43-45a7-8a1d-918323705d27",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a correctly generated LLM function for invalid q",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for invalid q",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 99\n})\n\nexpect(res).to.not.equal(null);\nexpect(res.length).to.equal(1);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.include(\"Cannot find module\");",
                  "err": {},
                  "uuid": "bcef55b4-e3f4-48f5-b2e2-b843ecb9283a",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing an incorrectly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing an incorrectly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return; }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].score).to.equal(0);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].score).to.equal(0);\n    \nexpect(res[2].score).to.equal(0);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "e1fbf42a-9442-4506-b5a3-cb74a93f3e70",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a broken function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a broken function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { , }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(1);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.contain(\"SyntaxError: Unexpected token \\',\\'\");",
                  "err": {},
                  "uuid": "634cb23d-6fae-42d0-81c3-e121bdc6c937",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a function with missing parameters for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a function with missing parameters for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return a + b }\",\n    \"id\": 1\n})\n    \nexpect(res.length).to.equal(1);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.contain(\"a is not defined\");",
                  "err": {},
                  "uuid": "7d4848f1-e12b-4670-bcf9-c1d22eac178c",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing improper JSON formats and undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing improper JSON formats and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.TestGeneratedCode({})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"id\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"llm_code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode(null)).to.equal(null);\nexpect(oa.TestGeneratedCode()).to.equal(null);",
                  "err": {},
                  "uuid": "d1b5b2a7-e6db-4850-814b-8fd0380e4fcd",
                  "parentUUID": "c5142c02-9014-4e94-8fd9-61cb3a9a1b29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a94ad79-bf43-45a7-8a1d-918323705d27",
                "bcef55b4-e3f4-48f5-b2e2-b843ecb9283a",
                "e1fbf42a-9442-4506-b5a3-cb74a93f3e70",
                "634cb23d-6fae-42d0-81c3-e121bdc6c937",
                "7d4848f1-e12b-4670-bcf9-c1d22eac178c",
                "d1b5b2a7-e6db-4850-814b-8fd0380e4fcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d1256dee-1e53-430f-acb3-36b5b4ea7dd8",
              "title": "Combining everything",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular test with proper query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Combining everything Regular test with proper query",
                  "timedOut": false,
                  "duration": 5303,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code.startsWith(\"function\")).to.equal(true);\nexpect(resp.llm_code).to.match(/function(.|\\s)*\\}/);\n    \nresp.id = 1;\n\nconst graded = oa.TestGeneratedCode(resp);\nexpect(graded.length).to.equal(3);\nexpect(graded[0].score).to.equal(1);\nexpect(graded[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(graded[1].score).to.equal(1);\nexpect(graded[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(graded[2].score).to.equal(1);\nexpect(graded[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "db8c9031-e122-4134-87d9-7daceac2397a",
                  "parentUUID": "d1256dee-1e53-430f-acb3-36b5b4ea7dd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db8c9031-e122-4134-87d9-7daceac2397a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5303,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8f43af77-1af4-42d8-b7c1-88d01e08c948",
              "title": "Testing the getTotalScore function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing when results are null/undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when results are null/undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore()).to.equal(null);\nexpect(oa.getTotalScore(null)).to.equal(null);\nexpect(oa.getTotalScore([])).to.equal(0);",
                  "err": {},
                  "uuid": "f4231042-a4dc-4dd7-ba02-49ee8277cbe0",
                  "parentUUID": "8f43af77-1af4-42d8-b7c1-88d01e08c948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing when error in testing function (i.e. errors)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when error in testing function (i.e. errors)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(err_results)).to.equal(0);",
                  "err": {},
                  "uuid": "41799337-be7d-4934-ba81-267887fad120",
                  "parentUUID": "8f43af77-1af4-42d8-b7c1-88d01e08c948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing with normal results",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing with normal results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(normal_results)).to.equal(6);",
                  "err": {},
                  "uuid": "3ce7adcf-7f24-4542-be44-9935de3b5fda",
                  "parentUUID": "8f43af77-1af4-42d8-b7c1-88d01e08c948",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4231042-a4dc-4dd7-ba02-49ee8277cbe0",
                "41799337-be7d-4934-ba81-267887fad120",
                "3ce7adcf-7f24-4542-be44-9935de3b5fda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "6d006129-75a1-4db4-8964-76a0a1155742",
          "title": "Tests for user_data functions",
          "fullFile": "/usr/src/app/server/test/user_data.test.js",
          "file": "/test/user_data.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"before each\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "23b4db80-22a3-4b01-9564-f91306884850",
              "parentUUID": "6d006129-75a1-4db4-8964-76a0a1155742",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"after all\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "1602460d-ef5d-47c3-b55d-77775a2a7513",
              "parentUUID": "6d006129-75a1-4db4-8964-76a0a1155742",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e39bf546-23b9-4be2-90b1-f49b23f8ca03",
              "title": "Testing the loadUserDataOnStart function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing an empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing an empty folder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(0);",
                  "err": {},
                  "uuid": "a19d2a1e-3e4a-4664-b73f-d8eee0b057d1",
                  "parentUUID": "e39bf546-23b9-4be2-90b1-f49b23f8ca03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-empty folder",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nconst users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(2);",
                  "err": {},
                  "uuid": "450a90fd-3496-433f-9f8c-fdb7b3d85e72",
                  "parentUUID": "e39bf546-23b9-4be2-90b1-f49b23f8ca03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-existent folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-existent folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(\"nonExistentFolder\");\nexpect(users).to.equal(null);",
                  "err": {},
                  "uuid": "d6ba60dc-459d-45fd-bfef-a6829aefee33",
                  "parentUUID": "e39bf546-23b9-4be2-90b1-f49b23f8ca03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null or missing folder param",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing null or missing folder param",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart();\nexpect(users).to.equal(null);\nconst users2 = udata.loadUserDataOnStart(null);\nexpect(users2).to.equal(null);",
                  "err": {},
                  "uuid": "96279896-1fe0-4ead-8c4e-9bfe1dacbdb7",
                  "parentUUID": "e39bf546-23b9-4be2-90b1-f49b23f8ca03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a19d2a1e-3e4a-4664-b73f-d8eee0b057d1",
                "450a90fd-3496-433f-9f8c-fdb7b3d85e72",
                "d6ba60dc-459d-45fd-bfef-a6829aefee33",
                "96279896-1fe0-4ead-8c4e-9bfe1dacbdb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7ce39358-be61-4dc2-8df1-c092beab5219",
              "title": "Testing the initializeUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initializing an existing user",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing an existing user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "6a75460a-f282-4c98-9731-c06d7689acf5",
                  "parentUUID": "7ce39358-be61-4dc2-8df1-c092beab5219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing multiple users",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing multiple users",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nexpect(udata.getUsers().length).to.equal(2);\nexpect(res).to.equal(\"success\");",
                  "err": {},
                  "uuid": "0142134b-c636-4ab7-b336-acefd94579f8",
                  "parentUUID": "7ce39358-be61-4dc2-8df1-c092beab5219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null and invalid folder",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null and invalid folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\", user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "58d258e9-5c5a-4d4d-b68f-df6c1e1ad5ef",
                  "parentUUID": "7ce39358-be61-4dc2-8df1-c092beab5219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null/missing userid/nickname",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null/missing userid/nickname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\");\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "a3611854-de05-4b40-b403-5bf0b49d02db",
                  "parentUUID": "7ce39358-be61-4dc2-8df1-c092beab5219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with all null/missing params",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with all null/missing params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile();\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "f2fc39a3-c4e3-4c0b-90d6-bd2875e7e9c9",
                  "parentUUID": "7ce39358-be61-4dc2-8df1-c092beab5219",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a75460a-f282-4c98-9731-c06d7689acf5",
                "0142134b-c636-4ab7-b336-acefd94579f8",
                "58d258e9-5c5a-4d4d-b68f-df6c1e1ad5ef",
                "a3611854-de05-4b40-b403-5bf0b49d02db",
                "f2fc39a3-c4e3-4c0b-90d6-bd2875e7e9c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a0791af3-e229-4bbb-a0f4-0135ef070e3e",
              "title": "Testing the updateUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating an existing user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, correct directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "a0c8826a-b190-43e1-8b85-b75407b9b42b",
                  "parentUUID": "a0791af3-e229-4bbb-a0f4-0135ef070e3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating an existing user, wrong directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, wrong directory",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(\"nonExistentFolder\", updatedUser);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "e8a0969d-601b-4485-b09a-9528cfa8a0b8",
                  "parentUUID": "a0791af3-e229-4bbb-a0f4-0135ef070e3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating with null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating with null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateUserDataFile(null, null)).to.equal(null);\nexpect(udata.updateUserDataFile()).to.equal(null);\nexpect(udata.updateUserDataFile(null, user0)).to.equal(null);\nexpect(udata.updateUserDataFile(testFolderName, null)).to.equal(null);",
                  "err": {},
                  "uuid": "689b58be-c24e-47c4-9f9b-10bb3dec4656",
                  "parentUUID": "a0791af3-e229-4bbb-a0f4-0135ef070e3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating non-existent user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating non-existent user, correct directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "5ecb637e-391b-4bc8-bd0c-bf5cf02db973",
                  "parentUUID": "a0791af3-e229-4bbb-a0f4-0135ef070e3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0c8826a-b190-43e1-8b85-b75407b9b42b",
                "e8a0969d-601b-4485-b09a-9528cfa8a0b8",
                "689b58be-c24e-47c4-9f9b-10bb3dec4656",
                "5ecb637e-391b-4bc8-bd0c-bf5cf02db973"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "b489f68a-0540-4b9a-80bc-2b8df3bcbc92",
              "title": "Testing the updateQuestionScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateQuestionScore(null, null)).to.equal(null);\nexpect(udata.updateQuestionScore()).to.equal(null);\nexpect(udata.updateQuestionScore(null, newQuestionData)).to.equal(null);\nexpect(udata.updateQuestionScore(user0, null)).to.equal(null);",
                  "err": {},
                  "uuid": "c60601f0-e53b-43c3-9109-adfa43d4553b",
                  "parentUUID": "b489f68a-0540-4b9a-80bc-2b8df3bcbc92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, new score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, new score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser = udata.updateQuestionScore(user, newQuestionData)\nexpect(updatedUser.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "2f3ec789-23d9-41a7-b0bb-f78057dd7d39",
                  "parentUUID": "b489f68a-0540-4b9a-80bc-2b8df3bcbc92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, lower score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, lower score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataLower);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser1.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "afab43c3-3bad-41d1-b092-9265e0cbb40a",
                  "parentUUID": "b489f68a-0540-4b9a-80bc-2b8df3bcbc92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, higher score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, higher score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataHigher);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(updatedUser1.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "26d76dd0-556c-4125-9c01-c2bdde907a97",
                  "parentUUID": "b489f68a-0540-4b9a-80bc-2b8df3bcbc92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c60601f0-e53b-43c3-9109-adfa43d4553b",
                "2f3ec789-23d9-41a7-b0bb-f78057dd7d39",
                "afab43c3-3bad-41d1-b092-9265e0cbb40a",
                "26d76dd0-556c-4125-9c01-c2bdde907a97"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
              "title": "Testing the updatedUserFileWithNewScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updatedUserFileWithNewScore(testFolderName, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(\"nonExistentFolder\", null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, user0.user_id, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, user0.user_id)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore()).to.equal(null);",
                  "err": {},
                  "uuid": "1bc3411d-8c05-4e22-af11-17bc9b07f43b",
                  "parentUUID": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for a new question",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for a new question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "df2ec8d8-2de4-4f4f-9e11-ccae71670ac3",
                  "parentUUID": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with lower score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with lower score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataLower);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "8e533f71-c78a-4d6e-8001-be11345cea24",
                  "parentUUID": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with higher score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with higher score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataHigher);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(user.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "da8e13d8-52f1-43b6-8a93-f9ae9ceaf2ab",
                  "parentUUID": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for multiple questions",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for multiple questions",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, diffQuestionData);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.questions_solved[diffQuestionData.qid]).to.equal(diffQuestionData.score);\nexpect(user.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "2ce64cd6-4e2b-448b-96a7-7bf541a9cae5",
                  "parentUUID": "bc2586e4-9815-4b20-a3af-1e05ac564ddf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bc3411d-8c05-4e22-af11-17bc9b07f43b",
                "df2ec8d8-2de4-4f4f-9e11-ccae71670ac3",
                "8e533f71-c78a-4d6e-8001-be11345cea24",
                "da8e13d8-52f1-43b6-8a93-f9ae9ceaf2ab",
                "2ce64cd6-4e2b-448b-96a7-7bf541a9cae5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.5.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}