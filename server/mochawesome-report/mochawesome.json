{
  "stats": {
    "suites": 20,
    "tests": 67,
    "passes": 65,
    "pending": 0,
    "failures": 2,
    "start": "2024-07-28T22:50:15.943Z",
    "end": "2024-07-28T22:51:11.506Z",
    "duration": 55563,
    "testsRegistered": 67,
    "passPercent": 97.01492537313433,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "946dc659-40f4-45ac-adc6-6c51d68c0f14",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a094a476-dbad-4bd7-ad73-eb25a5d52ad3",
          "title": "Tests for the Ollama backend REST API endpoints",
          "fullFile": "/usr/src/app/server/test/app.test.js",
          "file": "/test/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer = server.app.listen(done);\nrequest = supertest.agent(testServer);",
              "err": {},
              "uuid": "38fd2294-9db3-46d1-89a8-21b80318142d",
              "parentUUID": "a094a476-dbad-4bd7-ad73-eb25a5d52ad3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer.close(done);",
              "err": {},
              "uuid": "64e402df-b447-47c3-b7d6-65d5abe4296e",
              "parentUUID": "a094a476-dbad-4bd7-ad73-eb25a5d52ad3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c3130745-22d1-47d9-ba00-cf1fe98899ab",
              "title": "Testing the POST endpoint for /code",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing a regular description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Providing a regular description",
                  "timedOut": false,
                  "duration": 6322,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request\n.post('/code')\n.send(two_sum_fn_desc)\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body.llm_code).to.not.equal(null);\n    expect(res.body.llm_code).to.match(/return [\\w]+ \\+ [\\w]+/);\n    expect(res.body.llm_code).to.match(/function [\\w]+\\([\\w]+\\,[\\s]*[\\w]+\\)/);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "5eccc447-3386-49b7-929a-bfb26dd9fa82",
                  "parentUUID": "c3130745-22d1-47d9-ba00-cf1fe98899ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not providing a body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Not providing a body",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/code')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "b8c5e51d-a460-43b1-ad20-25a8d8df371e",
                  "parentUUID": "c3130745-22d1-47d9-ba00-cf1fe98899ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5eccc447-3386-49b7-929a-bfb26dd9fa82",
                "b8c5e51d-a460-43b1-ad20-25a8d8df371e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6324,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8b95434b-5b94-489c-bc16-84f941fb29e7",
              "title": "Testing the POST endpoint for /grade",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing random description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing random description",
                  "timedOut": false,
                  "duration": 9483,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"blah\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(false);\n    expect(res.body.results[1].passed).to.equal(false);\n    expect(res.body.results[2].passed).to.equal(false);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "327139f4-bc8d-44a8-a361-d7388ef641b5",
                  "parentUUID": "8b95434b-5b94-489c-bc16-84f941fb29e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing bad JSON body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing bad JSON body",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "b3369549-1603-4a3d-b201-501ba650e4ef",
                  "parentUUID": "8b95434b-5b94-489c-bc16-84f941fb29e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing invalid QID",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing invalid QID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 999, \"llm_code\": \"function foo(a, b) { return a + b; }\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "8d3a30b4-0ede-4436-a297-2ffdcda4af6d",
                  "parentUUID": "8b95434b-5b94-489c-bc16-84f941fb29e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing a regular, valid function for grade",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing a regular, valid function for grade",
                  "timedOut": false,
                  "duration": 5010,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"Takes two numbers and adds them together\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(true);\n    expect(res.body.results[1].passed).to.equal(true);\n    expect(res.body.results[2].passed).to.equal(true);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "204b49ef-ff40-48da-9766-d82c34693529",
                  "parentUUID": "8b95434b-5b94-489c-bc16-84f941fb29e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "327139f4-bc8d-44a8-a361-d7388ef641b5",
                "b3369549-1603-4a3d-b201-501ba650e4ef",
                "8d3a30b4-0ede-4436-a297-2ffdcda4af6d",
                "204b49ef-ff40-48da-9766-d82c34693529"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14496,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "bcd20e63-2bf7-439f-b244-b7e1928962ff",
              "title": "Testing question and unit test GET endpoints",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching question 1",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/1')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "978d98b4-e0c4-4319-b7b6-bfa07fe98fe0",
                  "parentUUID": "bcd20e63-2bf7-439f-b244-b7e1928962ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant question",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve the question.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "5be33996-be5d-4af8-a442-14d72d305d59",
                  "parentUUID": "bcd20e63-2bf7-439f-b244-b7e1928962ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching unit tests for question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching unit tests for question 1",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/1')\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.length).to.equal(3);\n    expect(res.body[0].desc).to.equal(\"A test to check if adding properly.\");\n    expect(res.body[1].desc).to.equal(\"A less basic test to check if adding properly.\");\n    expect(res.body[2].desc).to.equal(\"Another basic test to check if adding properly.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "f3135102-59d4-4e53-aeb5-eda076fb91d3",
                  "parentUUID": "bcd20e63-2bf7-439f-b244-b7e1928962ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant set of unit tests",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant set of unit tests",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve test cases.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "630966d6-303c-44b5-960d-3e48277eea70",
                  "parentUUID": "bcd20e63-2bf7-439f-b244-b7e1928962ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "978d98b4-e0c4-4319-b7b6-bfa07fe98fe0",
                "5be33996-be5d-4af8-a442-14d72d305d59",
                "f3135102-59d4-4e53-aeb5-eda076fb91d3",
                "630966d6-303c-44b5-960d-3e48277eea70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "4e4a12bb-9111-4e06-b4c8-8b2c9c55a1a0",
          "title": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers",
          "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
          "file": "/test/ollama_api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "76e233e5-3ab7-4645-95b8-88c6354b9342",
              "title": "Testing the GeneratePrompt function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Basic description of a function test",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Basic description of a function test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"hello world\");\nexpect(prompt)\n.to\n.equal(\"Write me a Javascript function that has the following purpose: hello world. Only show me the code and call the function foo.\")",
                  "err": {},
                  "uuid": "8b28c3cb-0e38-4b61-be02-c8b0f516b1f0",
                  "parentUUID": "76e233e5-3ab7-4645-95b8-88c6354b9342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"\");\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "1c929491-922d-4323-8076-7010e2eee064",
                  "parentUUID": "76e233e5-3ab7-4645-95b8-88c6354b9342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(null);\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "fa5f124a-c224-414d-b39d-5b7a142e5f44",
                  "parentUUID": "76e233e5-3ab7-4645-95b8-88c6354b9342",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt();\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "06aeae90-11cb-4a60-a51e-08ed8ed9a555",
                  "parentUUID": "76e233e5-3ab7-4645-95b8-88c6354b9342",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b28c3cb-0e38-4b61-be02-c8b0f516b1f0",
                "1c929491-922d-4323-8076-7010e2eee064",
                "fa5f124a-c224-414d-b39d-5b7a142e5f44",
                "06aeae90-11cb-4a60-a51e-08ed8ed9a555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "7c340133-301c-4906-8998-793727e6634d",
              "title": "Testing the ParseResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Regular response from LLM",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(llm_two_sum_response);\nexpect(resp).to.contain('function foo');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('return a + b');",
                  "err": {},
                  "uuid": "9f76f979-71a0-43ce-8f1e-8258a1c3e1c9",
                  "parentUUID": "7c340133-301c-4906-8998-793727e6634d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing error response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing error response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "9e2b0490-9b33-4c1a-aa72-76278fd2a81a",
                  "parentUUID": "7c340133-301c-4906-8998-793727e6634d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "04d1e11f-ac1a-415a-ab39-fd1bb34e585d",
                  "parentUUID": "7c340133-301c-4906-8998-793727e6634d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing a weird response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing a weird response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(weird_llm_response);\nexpect(resp).to.contain('function');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('toLowerCase');",
                  "err": {},
                  "uuid": "5c337a86-0e38-4c27-87f2-558b3b1a3524",
                  "parentUUID": "7c340133-301c-4906-8998-793727e6634d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f76f979-71a0-43ce-8f1e-8258a1c3e1c9",
                "9e2b0490-9b33-4c1a-aa72-76278fd2a81a",
                "04d1e11f-ac1a-415a-ab39-fd1bb34e585d",
                "5c337a86-0e38-4c27-87f2-558b3b1a3524"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b56aa75a-e7c0-4523-bb37-a0d0c2717fa4",
              "title": "Testing the FetchResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching response for regular query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for regular query",
                  "timedOut": false,
                  "duration": 7361,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code).to.contain(\"function\");\nexpect(resp.llm_code).to.contain(\"+\");",
                  "err": {},
                  "uuid": "30598b68-51d3-46d6-a012-439ce5d3e13f",
                  "parentUUID": "b56aa75a-e7c0-4523-bb37-a0d0c2717fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for random query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for random query",
                  "timedOut": false,
                  "duration": 21433,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(\"blah\")\nexpect(resp).to.not.equal(null);",
                  "err": {},
                  "uuid": "b6f3b627-5bc2-4ae3-b33c-33892ddef625",
                  "parentUUID": "b56aa75a-e7c0-4523-bb37-a0d0c2717fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for null query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for null query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "7ddfeae6-528f-425f-aeec-30e3c423ba23",
                  "parentUUID": "b56aa75a-e7c0-4523-bb37-a0d0c2717fa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for missing query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for missing query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "5162320b-5d80-4bbc-b86d-21fbd78e485c",
                  "parentUUID": "b56aa75a-e7c0-4523-bb37-a0d0c2717fa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30598b68-51d3-46d6-a012-439ce5d3e13f",
                "b6f3b627-5bc2-4ae3-b33c-33892ddef625",
                "7ddfeae6-528f-425f-aeec-30e3c423ba23",
                "5162320b-5d80-4bbc-b86d-21fbd78e485c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28794,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "d52bc784-f191-45b1-ac8a-106577bbf829",
              "title": "Testing the isMalicious function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(malicious_fn_desc);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "58541b24-eb62-46be-a6a4-354753812405",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"for(;;)\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "3ef39879-cac6-4904-b14c-44ff46d3d7c2",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing safe description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing safe description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(two_sum_fn_desc.desc);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "54f16b96-9a40-4949-a403-cb7a606134c3",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing empty description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing empty description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "f851d9a8-1d8a-4ed4-8a7d-0b5fd659dadf",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing null description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(null);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "1f646d24-40af-49cb-a550-be6f9ca938f2",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing random description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing random description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"my name is Chris\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "3e1111ba-f5d5-4ca7-b4c0-0632d4011265",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing undefined description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing undefined description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious();\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "aa3e7907-7af4-4637-add8-620cab5e62be",
                  "parentUUID": "d52bc784-f191-45b1-ac8a-106577bbf829",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58541b24-eb62-46be-a6a4-354753812405",
                "3ef39879-cac6-4904-b14c-44ff46d3d7c2",
                "54f16b96-9a40-4949-a403-cb7a606134c3",
                "f851d9a8-1d8a-4ed4-8a7d-0b5fd659dadf",
                "1f646d24-40af-49cb-a550-be6f9ca938f2",
                "3e1111ba-f5d5-4ca7-b4c0-0632d4011265",
                "aa3e7907-7af4-4637-add8-620cab5e62be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b1e302be-d457-44cd-94bb-6629919a680c",
              "title": "Testing the TestGeneratedCode function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing a correctly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 1\n})\n\nexpect(res.length).to.equal(3);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].passed).to.equal(true);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].passed).to.equal(true);\n    \nexpect(res[2].passed).to.equal(true);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "be877a64-4c6c-47c8-81dd-af6cbdc6f228",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a correctly generated LLM function for invalid q",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for invalid q",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 99\n})\n\nexpect(res).to.not.equal(null);\nexpect(res.length).to.equal(1);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.include(\"Cannot find module\");",
                  "err": {},
                  "uuid": "8a59a7f2-4152-428b-90bf-47c2df9720fa",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing an incorrectly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing an incorrectly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return; }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].passed).to.equal(false);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].passed).to.equal(false);\n    \nexpect(res[2].passed).to.equal(false);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "328bc94f-2365-4086-b704-9a0732cf169a",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a broken function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a broken function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { , }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(1);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.contain(\"SyntaxError: Unexpected token \\',\\'\");",
                  "err": {},
                  "uuid": "5a76b99f-0fe2-4042-9bcd-a5a0c6f04a33",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a function with missing parameters for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a function with missing parameters for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return a + b }\",\n    \"id\": 1\n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[1].passed).to.equal(false);\nexpect(res[1].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[2].passed).to.equal(false);\nexpect(res[2].actual_outputs[0]).to.contain(\"a is not defined\");",
                  "err": {},
                  "uuid": "f1f97e07-01f0-45cd-a59d-555f29aefa4e",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing improper JSON formats and undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing improper JSON formats and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.TestGeneratedCode({})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"id\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"llm_code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode(null)).to.equal(null);\nexpect(oa.TestGeneratedCode()).to.equal(null);",
                  "err": {},
                  "uuid": "a793e0e5-6402-49cf-b57f-cc2ef83522b6",
                  "parentUUID": "b1e302be-d457-44cd-94bb-6629919a680c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be877a64-4c6c-47c8-81dd-af6cbdc6f228",
                "8a59a7f2-4152-428b-90bf-47c2df9720fa",
                "328bc94f-2365-4086-b704-9a0732cf169a",
                "5a76b99f-0fe2-4042-9bcd-a5a0c6f04a33",
                "f1f97e07-01f0-45cd-a59d-555f29aefa4e",
                "a793e0e5-6402-49cf-b57f-cc2ef83522b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "effe8096-7573-4b2f-bd7d-afc20fc1c7ae",
              "title": "Combining everything",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular test with proper query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Combining everything Regular test with proper query",
                  "timedOut": false,
                  "duration": 5856,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code.startsWith(\"function\")).to.equal(true);\nexpect(resp.llm_code).to.match(/function(.|\\s)*\\}/);\n    \nresp.id = 1;\n\nconst graded = oa.TestGeneratedCode(resp);\nexpect(graded.length).to.equal(3);\nexpect(graded[0].passed).to.equal(true);\nexpect(graded[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(graded[1].passed).to.equal(true);\nexpect(graded[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(graded[2].passed).to.equal(true);\nexpect(graded[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "08809e5f-aa3e-43e6-83b8-359cd42351ee",
                  "parentUUID": "effe8096-7573-4b2f-bd7d-afc20fc1c7ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08809e5f-aa3e-43e6-83b8-359cd42351ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5856,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "597796e5-27e3-4df7-a47f-59fc45523e55",
              "title": "Testing the getTotalScore function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing when results are null/undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when results are null/undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore()).to.equal(null);\nexpect(oa.getTotalScore(null)).to.equal(null);\nexpect(oa.getTotalScore([])).to.equal(0);",
                  "err": {},
                  "uuid": "b44684c1-0418-4a85-89f8-8e530a595e4a",
                  "parentUUID": "597796e5-27e3-4df7-a47f-59fc45523e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing when error in testing function (i.e. errors)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when error in testing function (i.e. errors)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(err_results)).to.equal(0);",
                  "err": {},
                  "uuid": "0f8ccd2b-efdf-4952-85ea-0a543002fd41",
                  "parentUUID": "597796e5-27e3-4df7-a47f-59fc45523e55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing with normal results",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing with normal results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(normal_results)).to.equal(6);",
                  "err": {},
                  "uuid": "a5c0953d-51dd-4425-a3b5-c95f74951b05",
                  "parentUUID": "597796e5-27e3-4df7-a47f-59fc45523e55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b44684c1-0418-4a85-89f8-8e530a595e4a",
                "0f8ccd2b-efdf-4952-85ea-0a543002fd41",
                "a5c0953d-51dd-4425-a3b5-c95f74951b05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "dfe81923-d5cc-48dc-92fd-5bd197f430ac",
          "title": "Tests for user_data functions",
          "fullFile": "/usr/src/app/server/test/user_data.test.js",
          "file": "/test/user_data.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"before each\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "2d22f975-8490-4362-878d-19181084bfef",
              "parentUUID": "dfe81923-d5cc-48dc-92fd-5bd197f430ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"after all\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();\nudata.loadUserDataOnStart(\"data\");",
              "err": {},
              "uuid": "58e0e5f1-224f-4597-89c6-bbf4a3b8d615",
              "parentUUID": "dfe81923-d5cc-48dc-92fd-5bd197f430ac",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "364b8ad5-29db-4013-935e-1e8dce9c262c",
              "title": "Testing the loadUserDataOnStart function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing an empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing an empty folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(0);",
                  "err": {},
                  "uuid": "fadc25e2-a17d-443e-a258-372bb66f2658",
                  "parentUUID": "364b8ad5-29db-4013-935e-1e8dce9c262c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-empty folder",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nconst users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(2);",
                  "err": {},
                  "uuid": "e987c2c0-2a2e-429d-bd18-72d6551d91b0",
                  "parentUUID": "364b8ad5-29db-4013-935e-1e8dce9c262c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-existent folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-existent folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(\"nonExistentFolder\");\nexpect(users).to.equal(null);",
                  "err": {},
                  "uuid": "b1e378e6-5ed9-4038-bf40-78d82464fced",
                  "parentUUID": "364b8ad5-29db-4013-935e-1e8dce9c262c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null or missing folder param",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing null or missing folder param",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart();\nexpect(users).to.equal(null);\nconst users2 = udata.loadUserDataOnStart(null);\nexpect(users2).to.equal(null);",
                  "err": {},
                  "uuid": "5bd028d6-ee53-472c-a439-cb053d5dd6df",
                  "parentUUID": "364b8ad5-29db-4013-935e-1e8dce9c262c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fadc25e2-a17d-443e-a258-372bb66f2658",
                "e987c2c0-2a2e-429d-bd18-72d6551d91b0",
                "b1e378e6-5ed9-4038-bf40-78d82464fced",
                "5bd028d6-ee53-472c-a439-cb053d5dd6df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
              "title": "Testing the initializeUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initializing an existing user",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing an existing user",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "dfa3b567-c70e-4661-a25a-5887ffa6bb8d",
                  "parentUUID": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing multiple users",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing multiple users",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nexpect(udata.getUsers().length).to.equal(2);\nexpect(res).to.equal(\"success\");",
                  "err": {},
                  "uuid": "71883014-9244-48c6-ba49-2fbf75e0acb6",
                  "parentUUID": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null and invalid folder",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null and invalid folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\", user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "42f85a74-c94c-462a-8b37-7c1932f4eb4a",
                  "parentUUID": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null/missing userid/nickname",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null/missing userid/nickname",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\");\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "35d36401-5ec2-455d-973d-ae6be56c6c44",
                  "parentUUID": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with all null/missing params",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with all null/missing params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile();\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "e34fec24-40e7-400b-a0e5-f0fe627bf849",
                  "parentUUID": "f211e00d-ceb7-41b1-b8a6-b4ae182951ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfa3b567-c70e-4661-a25a-5887ffa6bb8d",
                "71883014-9244-48c6-ba49-2fbf75e0acb6",
                "42f85a74-c94c-462a-8b37-7c1932f4eb4a",
                "35d36401-5ec2-455d-973d-ae6be56c6c44",
                "e34fec24-40e7-400b-a0e5-f0fe627bf849"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "2bd3fbf3-ac55-4334-9d2a-607bf2d255f6",
              "title": "Testing the updateUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating an existing user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, correct directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "5301793b-29a6-48da-8357-59688ef3079c",
                  "parentUUID": "2bd3fbf3-ac55-4334-9d2a-607bf2d255f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating an existing user, wrong directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, wrong directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(\"nonExistentFolder\", updatedUser);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "d968bd7d-2c7e-42a1-a100-3b6451e55985",
                  "parentUUID": "2bd3fbf3-ac55-4334-9d2a-607bf2d255f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating with null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating with null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateUserDataFile(null, null)).to.equal(null);\nexpect(udata.updateUserDataFile()).to.equal(null);\nexpect(udata.updateUserDataFile(null, user0)).to.equal(null);\nexpect(udata.updateUserDataFile(testFolderName, null)).to.equal(null);",
                  "err": {},
                  "uuid": "3aec80fe-201f-4855-8c97-fcba364655ed",
                  "parentUUID": "2bd3fbf3-ac55-4334-9d2a-607bf2d255f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating non-existent user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating non-existent user, correct directory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "b493aaff-e515-4d7c-8935-dda6f6bb5409",
                  "parentUUID": "2bd3fbf3-ac55-4334-9d2a-607bf2d255f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5301793b-29a6-48da-8357-59688ef3079c",
                "d968bd7d-2c7e-42a1-a100-3b6451e55985",
                "3aec80fe-201f-4855-8c97-fcba364655ed",
                "b493aaff-e515-4d7c-8935-dda6f6bb5409"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "519b96d2-e694-43b8-887b-498435ce7ac0",
              "title": "Testing the updateQuestionScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateQuestionScore(null, null)).to.equal(null);\nexpect(udata.updateQuestionScore()).to.equal(null);\nexpect(udata.updateQuestionScore(null, newQuestionData)).to.equal(null);\nexpect(udata.updateQuestionScore(user0, null)).to.equal(null);",
                  "err": {},
                  "uuid": "c876d63b-469f-4950-a291-92126b89c027",
                  "parentUUID": "519b96d2-e694-43b8-887b-498435ce7ac0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, new score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, new score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser = udata.updateQuestionScore(user, newQuestionData)\nexpect(updatedUser.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "97ab521c-1219-4e83-816d-fb5f94536145",
                  "parentUUID": "519b96d2-e694-43b8-887b-498435ce7ac0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, lower score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, lower score",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataLower);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser1.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "3fea1cc9-7bb5-4833-b6c8-b35345713939",
                  "parentUUID": "519b96d2-e694-43b8-887b-498435ce7ac0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, higher score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, higher score",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataHigher);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(updatedUser1.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "afac997e-b9fe-4c73-a7c0-433d184afcd9",
                  "parentUUID": "519b96d2-e694-43b8-887b-498435ce7ac0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c876d63b-469f-4950-a291-92126b89c027",
                "97ab521c-1219-4e83-816d-fb5f94536145",
                "3fea1cc9-7bb5-4833-b6c8-b35345713939",
                "afac997e-b9fe-4c73-a7c0-433d184afcd9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
              "title": "Testing the updatedUserFileWithNewScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updatedUserFileWithNewScore(testFolderName, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(\"nonExistentFolder\", null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, user0.user_id, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, user0.user_id)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore()).to.equal(null);",
                  "err": {},
                  "uuid": "6d645ea1-0fcc-430b-8165-fc82811cfd13",
                  "parentUUID": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for a new question",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for a new question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "ec1ede0d-d1db-4dc6-b696-dd6f5a43e40b",
                  "parentUUID": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with lower score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with lower score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataLower);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "784aa156-8d69-4148-8779-1c9d755586c6",
                  "parentUUID": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with higher score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with higher score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataHigher);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(user.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "0f460c0f-17c2-459a-85c8-fbad97d576bd",
                  "parentUUID": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for multiple questions",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for multiple questions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, diffQuestionData);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.questions_solved[diffQuestionData.qid]).to.equal(diffQuestionData.score);\nexpect(user.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "707161e6-b288-42e5-adf1-b3575f5da184",
                  "parentUUID": "fa2c0289-a5f8-422d-9636-e6e61b21a1e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d645ea1-0fcc-430b-8165-fc82811cfd13",
                "ec1ede0d-d1db-4dc6-b696-dd6f5a43e40b",
                "784aa156-8d69-4148-8779-1c9d755586c6",
                "0f460c0f-17c2-459a-85c8-fbad97d576bd",
                "707161e6-b288-42e5-adf1-b3575f5da184"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "e4a36f8f-28f3-4114-aaf2-ccb766038e2c",
              "title": "Testing initializeAttemptData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/missing input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing null/missing input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.initializeAttemptData()).to.equal(null);\nexpect(udata.initializeAttemptData(null, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(attemptsFolder, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "93906931-35fa-44a8-8966-ed767054e11f",
                  "parentUUID": "e4a36f8f-28f3-4114-aaf2-ccb766038e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing normal input",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(res).to.eql([]);\nexpect(udata.getAttemptData(attemptsFolder, 1, user0.user_id)).to.eql([]);",
                  "err": {},
                  "uuid": "213025ec-60bf-4f6c-9211-310350fa67d5",
                  "parentUUID": "e4a36f8f-28f3-4114-aaf2-ccb766038e2c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing existing user",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing existing user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.initializeAttemptData(attemptsFolder, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "e845f3f0-0053-43ac-ac86-053d3ae88680",
                  "parentUUID": "e4a36f8f-28f3-4114-aaf2-ccb766038e2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93906931-35fa-44a8-8966-ed767054e11f",
                "213025ec-60bf-4f6c-9211-310350fa67d5",
                "e845f3f0-0053-43ac-ac86-053d3ae88680"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ece611f7-2dcb-42f5-a8d8-5ea56e83308d",
              "title": "Testing addAttemptToUserData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined input",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing null/undefined input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, null, null, null)).to.equal(null);\nexpect(udata.addAttemptToUserData(null, user0.user_id, 1, attemptDataBadExample)).to.equal(null);\nexpect(udata.addAttemptToUserData()).to.equal(null);\nexpect(udata.addAttemptToUserData(null, null, null, null)).to.equal(null);",
                  "err": {},
                  "uuid": "ac02e446-6ba8-4942-bbba-296dac6a4ab1",
                  "parentUUID": "ece611f7-2dcb-42f5-a8d8-5ea56e83308d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with non-existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with non-existing attempt data file",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data[0].length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 1",
                    "estack": "AssertionError: expected undefined to equal 1\n    at Context.<anonymous> (test/user_data.test.js:387:39)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": null
                  },
                  "uuid": "13806c94-7450-4db8-b434-e0bb2ecfe5d6",
                  "parentUUID": "ece611f7-2dcb-42f5-a8d8-5ea56e83308d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with existing attempt data file",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data[0].length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 1",
                    "estack": "AssertionError: expected undefined to equal 1\n    at Context.<anonymous> (test/user_data.test.js:396:39)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": null
                  },
                  "uuid": "917036ed-4fcd-4e53-93c5-bc97639e8a49",
                  "parentUUID": "ece611f7-2dcb-42f5-a8d8-5ea56e83308d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac02e446-6ba8-4942-bbba-296dac6a4ab1"
              ],
              "failures": [
                "13806c94-7450-4db8-b434-e0bb2ecfe5d6",
                "917036ed-4fcd-4e53-93c5-bc97639e8a49"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.5.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}