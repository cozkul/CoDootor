{
  "stats": {
    "suites": 18,
    "tests": 61,
    "passes": 61,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-28T05:49:08.993Z",
    "end": "2024-07-28T05:50:16.551Z",
    "duration": 67558,
    "testsRegistered": 61,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2c4911b-4169-4434-a16f-723679b3a483",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1146e25c-a797-4593-a7a9-e9a6076bfc9e",
          "title": "Tests for the Ollama backend REST API endpoints",
          "fullFile": "/usr/src/app/server/test/app.test.js",
          "file": "/test/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer = server.app.listen(done);\nrequest = supertest.agent(testServer);",
              "err": {},
              "uuid": "bf47522e-c06e-4480-884b-dce069f9e192",
              "parentUUID": "1146e25c-a797-4593-a7a9-e9a6076bfc9e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer.close(done);",
              "err": {},
              "uuid": "74e8ccf1-1e14-4eb2-b9cd-407e72dac7ca",
              "parentUUID": "1146e25c-a797-4593-a7a9-e9a6076bfc9e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2e0a5d69-f6d1-4600-9b01-77c80ce01a32",
              "title": "Testing the POST endpoint for /code",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing a regular description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Providing a regular description",
                  "timedOut": false,
                  "duration": 19791,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request\n.post('/code')\n.send(two_sum_fn_desc)\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body.llm_code).to.not.equal(null);\n    expect(res.body.llm_code).to.match(/return [\\w]+ \\+ [\\w]+/);\n    expect(res.body.llm_code).to.match(/function [\\w]+\\([\\w]+\\,[\\s]*[\\w]+\\)/);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "2ecc1229-061d-47fd-99f2-08f7c74efe66",
                  "parentUUID": "2e0a5d69-f6d1-4600-9b01-77c80ce01a32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not providing a body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Not providing a body",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/code')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "1e14077c-c555-4527-ab7e-ee5ab90b42c1",
                  "parentUUID": "2e0a5d69-f6d1-4600-9b01-77c80ce01a32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ecc1229-061d-47fd-99f2-08f7c74efe66",
                "1e14077c-c555-4527-ab7e-ee5ab90b42c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19795,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "307bf6ad-47be-4634-9789-77bc4e46012d",
              "title": "Testing the POST endpoint for /grade",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing random description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing random description",
                  "timedOut": false,
                  "duration": 20851,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"blah\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(false);\n    expect(res.body.results[1].passed).to.equal(false);\n    expect(res.body.results[2].passed).to.equal(false);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "23826c3a-4963-414a-958f-6113a150271c",
                  "parentUUID": "307bf6ad-47be-4634-9789-77bc4e46012d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing bad JSON body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing bad JSON body",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "db028e45-d415-4fdd-ab3c-cbc8c3a564a2",
                  "parentUUID": "307bf6ad-47be-4634-9789-77bc4e46012d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing invalid QID",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing invalid QID",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 999, \"llm_code\": \"function foo(a, b) { return a + b; }\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "e5a01d3f-c8dd-4408-9da4-4a7770eac4c3",
                  "parentUUID": "307bf6ad-47be-4634-9789-77bc4e46012d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing a regular, valid function for grade",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing a regular, valid function for grade",
                  "timedOut": false,
                  "duration": 4805,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"Takes two numbers and adds them together\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(true);\n    expect(res.body.results[1].passed).to.equal(true);\n    expect(res.body.results[2].passed).to.equal(true);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "29754067-34a5-4231-bedd-86906de7ae6d",
                  "parentUUID": "307bf6ad-47be-4634-9789-77bc4e46012d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23826c3a-4963-414a-958f-6113a150271c",
                "db028e45-d415-4fdd-ab3c-cbc8c3a564a2",
                "e5a01d3f-c8dd-4408-9da4-4a7770eac4c3",
                "29754067-34a5-4231-bedd-86906de7ae6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25658,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2e507275-999b-4802-9fd0-911157032943",
              "title": "Testing question and unit test GET endpoints",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching question 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/1')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "40aebd5c-3be3-445f-b4a2-03c3587fe7f8",
                  "parentUUID": "2e507275-999b-4802-9fd0-911157032943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant question",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve the question.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "31835d1b-fa7c-4a63-b27f-74e82c13e5a6",
                  "parentUUID": "2e507275-999b-4802-9fd0-911157032943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching unit tests for question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching unit tests for question 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/1')\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.length).to.equal(3);\n    expect(res.body[0].desc).to.equal(\"A test to check if adding properly.\");\n    expect(res.body[1].desc).to.equal(\"A less basic test to check if adding properly.\");\n    expect(res.body[2].desc).to.equal(\"Another basic test to check if adding properly.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "3fe81d80-6701-4f05-af9e-dbec67b865e0",
                  "parentUUID": "2e507275-999b-4802-9fd0-911157032943",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant set of unit tests",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant set of unit tests",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve test cases.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "99867f92-5a4d-4a73-96d6-6a123c9e1978",
                  "parentUUID": "2e507275-999b-4802-9fd0-911157032943",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40aebd5c-3be3-445f-b4a2-03c3587fe7f8",
                "31835d1b-fa7c-4a63-b27f-74e82c13e5a6",
                "3fe81d80-6701-4f05-af9e-dbec67b865e0",
                "99867f92-5a4d-4a73-96d6-6a123c9e1978"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "7929335b-2743-43bf-905f-a2a38a804cef",
          "title": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers",
          "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
          "file": "/test/ollama_api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "29223c39-af74-441e-bcfa-be2e3bc12449",
              "title": "Testing the GeneratePrompt function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Basic description of a function test",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Basic description of a function test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"hello world\");\nexpect(prompt)\n.to\n.equal(\"Write me a Javascript function that has the following purpose: hello world. Only show me the code and call the function foo.\")",
                  "err": {},
                  "uuid": "88b82983-d418-4803-8588-6ac36993468a",
                  "parentUUID": "29223c39-af74-441e-bcfa-be2e3bc12449",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"\");\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "a1bb98c7-52c9-4e43-999a-ff047490eeb7",
                  "parentUUID": "29223c39-af74-441e-bcfa-be2e3bc12449",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(null);\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "fc517364-6593-4817-b25f-1066d98f7b09",
                  "parentUUID": "29223c39-af74-441e-bcfa-be2e3bc12449",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt();\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "127ff7dc-846e-41e9-b4ad-8228df577c93",
                  "parentUUID": "29223c39-af74-441e-bcfa-be2e3bc12449",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88b82983-d418-4803-8588-6ac36993468a",
                "a1bb98c7-52c9-4e43-999a-ff047490eeb7",
                "fc517364-6593-4817-b25f-1066d98f7b09",
                "127ff7dc-846e-41e9-b4ad-8228df577c93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e70e182f-4b5f-4c15-9729-17921fe2e21d",
              "title": "Testing the ParseResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Regular response from LLM",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(llm_two_sum_response);\nexpect(resp).to.contain('function foo');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('return a + b');",
                  "err": {},
                  "uuid": "a536d155-e593-4be0-bdaa-a31bfb59b979",
                  "parentUUID": "e70e182f-4b5f-4c15-9729-17921fe2e21d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing error response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing error response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "5470aa35-9636-4119-98b8-89bb4befc3e4",
                  "parentUUID": "e70e182f-4b5f-4c15-9729-17921fe2e21d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "e97fd3aa-0077-4cfb-9e78-df09e2d63186",
                  "parentUUID": "e70e182f-4b5f-4c15-9729-17921fe2e21d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing a weird response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing a weird response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(weird_llm_response);\nexpect(resp).to.contain('function');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('toLowerCase');",
                  "err": {},
                  "uuid": "06503829-fd1a-4e8d-930e-c20d8fccb971",
                  "parentUUID": "e70e182f-4b5f-4c15-9729-17921fe2e21d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a536d155-e593-4be0-bdaa-a31bfb59b979",
                "5470aa35-9636-4119-98b8-89bb4befc3e4",
                "e97fd3aa-0077-4cfb-9e78-df09e2d63186",
                "06503829-fd1a-4e8d-930e-c20d8fccb971"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "2a847170-b45c-4a7c-ad07-348cabc7d64f",
              "title": "Testing the FetchResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching response for regular query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for regular query",
                  "timedOut": false,
                  "duration": 7597,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code).to.contain(\"function\");\nexpect(resp.llm_code).to.contain(\"+\");",
                  "err": {},
                  "uuid": "81c3320b-8025-4ed6-b089-283438be7ccc",
                  "parentUUID": "2a847170-b45c-4a7c-ad07-348cabc7d64f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for random query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for random query",
                  "timedOut": false,
                  "duration": 9007,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(\"blah\")\nexpect(resp).to.not.equal(null);",
                  "err": {},
                  "uuid": "42fc4d5c-8582-4cc0-a735-91f1592d9fa6",
                  "parentUUID": "2a847170-b45c-4a7c-ad07-348cabc7d64f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for null query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for null query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "bc1fbc69-ce0b-482c-a10d-e2ba2e53ad11",
                  "parentUUID": "2a847170-b45c-4a7c-ad07-348cabc7d64f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for missing query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for missing query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "40957ab2-7a6f-41cf-8547-7ad21dcfc1f2",
                  "parentUUID": "2a847170-b45c-4a7c-ad07-348cabc7d64f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81c3320b-8025-4ed6-b089-283438be7ccc",
                "42fc4d5c-8582-4cc0-a735-91f1592d9fa6",
                "bc1fbc69-ce0b-482c-a10d-e2ba2e53ad11",
                "40957ab2-7a6f-41cf-8547-7ad21dcfc1f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16604,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4e41497e-a062-451d-8d89-a45512483bee",
              "title": "Testing the isMalicious function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(malicious_fn_desc);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "690472b6-b38a-4e81-9815-bbe94357ca2c",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"for(;;)\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "25414b4d-b293-4e5b-8ba7-561d679b60da",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing safe description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing safe description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(two_sum_fn_desc.desc);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "3db5aefc-f787-4227-99a0-a2690c52b7ff",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing empty description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing empty description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "62305cc5-f6e2-405c-9a60-7768307d25a2",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing null description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(null);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "752373fe-a60c-49bb-8578-962b5d130876",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing random description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing random description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"my name is Chris\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "665536c7-11bb-41e1-b409-a232b7550667",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing undefined description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing undefined description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious();\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "bfc3ebeb-d51b-4d35-a50a-7c5b117307b3",
                  "parentUUID": "4e41497e-a062-451d-8d89-a45512483bee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "690472b6-b38a-4e81-9815-bbe94357ca2c",
                "25414b4d-b293-4e5b-8ba7-561d679b60da",
                "3db5aefc-f787-4227-99a0-a2690c52b7ff",
                "62305cc5-f6e2-405c-9a60-7768307d25a2",
                "752373fe-a60c-49bb-8578-962b5d130876",
                "665536c7-11bb-41e1-b409-a232b7550667",
                "bfc3ebeb-d51b-4d35-a50a-7c5b117307b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "53b15fed-3d67-4968-9f6d-36740d069eab",
              "title": "Testing the TestGeneratedCode function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing a correctly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 1\n})\n\nexpect(res.length).to.equal(3);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].passed).to.equal(true);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].passed).to.equal(true);\n    \nexpect(res[2].passed).to.equal(true);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "6f3414c8-f728-46e9-901b-f15e383dd9d3",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a correctly generated LLM function for invalid q",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for invalid q",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 99\n})\n\nexpect(res).to.not.equal(null);\nexpect(res.length).to.equal(1);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.include(\"Cannot find module\");",
                  "err": {},
                  "uuid": "15b44ef9-fc7f-4e14-8204-4d01e38cafcf",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing an incorrectly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing an incorrectly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return; }\",\n    \"id\": 1 \n})\nconsole.log(res);\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(res[0].passed).to.equal(false);\n    \nexpect(res[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(res[1].passed).to.equal(false);\n    \nexpect(res[2].passed).to.equal(false);\nexpect(res[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "20331a40-d24c-4ae2-9e9a-44e1c9a6f479",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a broken function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a broken function for Q1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { , }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(1);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].err).to.equal(true);\nexpect(res[0].err_reason).to.contain(\"SyntaxError: Unexpected token \\',\\'\");",
                  "err": {},
                  "uuid": "a4a16dfe-aa87-4c29-a6e2-ae3eab4a5e42",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a function with missing parameters for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a function with missing parameters for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return a + b }\",\n    \"id\": 1\n})\nconsole.log(res);\n    \nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[1].passed).to.equal(false);\nexpect(res[1].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[2].passed).to.equal(false);\nexpect(res[2].actual_outputs[0]).to.contain(\"a is not defined\");",
                  "err": {},
                  "uuid": "df9f56db-b23a-4b0f-ae75-054c2d656d57",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing improper JSON formats and undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing improper JSON formats and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.TestGeneratedCode({})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"id\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"llm_code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode(null)).to.equal(null);\nexpect(oa.TestGeneratedCode()).to.equal(null);",
                  "err": {},
                  "uuid": "7eb949be-f59a-4e1f-80c7-3e6c6c1c4a57",
                  "parentUUID": "53b15fed-3d67-4968-9f6d-36740d069eab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f3414c8-f728-46e9-901b-f15e383dd9d3",
                "15b44ef9-fc7f-4e14-8204-4d01e38cafcf",
                "20331a40-d24c-4ae2-9e9a-44e1c9a6f479",
                "a4a16dfe-aa87-4c29-a6e2-ae3eab4a5e42",
                "df9f56db-b23a-4b0f-ae75-054c2d656d57",
                "7eb949be-f59a-4e1f-80c7-3e6c6c1c4a57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a90573cd-9496-4004-bd25-e2cc94e6d84c",
              "title": "Combining everything",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular test with proper query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Combining everything Regular test with proper query",
                  "timedOut": false,
                  "duration": 5419,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code.startsWith(\"function\")).to.equal(true);\nexpect(resp.llm_code).to.match(/function(.|\\s)*\\}/);\n    \nresp.id = 1;\n\nconst graded = oa.TestGeneratedCode(resp);\nexpect(graded.length).to.equal(3);\nexpect(graded[0].passed).to.equal(true);\nexpect(graded[0].desc).to.equal(\"A test to check if adding properly.\");\nexpect(graded[1].passed).to.equal(true);\nexpect(graded[1].desc).to.equal(\"A less basic test to check if adding properly.\");\nexpect(graded[2].passed).to.equal(true);\nexpect(graded[2].desc).to.equal(\"Another basic test to check if adding properly.\");",
                  "err": {},
                  "uuid": "eec634d9-2ef7-418f-9eed-e9eea5706506",
                  "parentUUID": "a90573cd-9496-4004-bd25-e2cc94e6d84c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eec634d9-2ef7-418f-9eed-e9eea5706506"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5419,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "e72d121a-80ef-4e82-996f-483feee7addb",
              "title": "Testing the getTotalScore function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing when results are null/undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when results are null/undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore()).to.equal(null);\nexpect(oa.getTotalScore(null)).to.equal(null);\nexpect(oa.getTotalScore([])).to.equal(0);",
                  "err": {},
                  "uuid": "aa2abec7-8476-45f7-b449-986267818a2a",
                  "parentUUID": "e72d121a-80ef-4e82-996f-483feee7addb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing when error in testing function (i.e. errors)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when error in testing function (i.e. errors)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(err_results)).to.equal(0);",
                  "err": {},
                  "uuid": "4225314e-0055-4846-bb48-e808f1b31691",
                  "parentUUID": "e72d121a-80ef-4e82-996f-483feee7addb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing with normal results",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing with normal results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(normal_results)).to.equal(6);",
                  "err": {},
                  "uuid": "fe1e7cf0-aefd-4ae6-a804-5763f0e80087",
                  "parentUUID": "e72d121a-80ef-4e82-996f-483feee7addb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa2abec7-8476-45f7-b449-986267818a2a",
                "4225314e-0055-4846-bb48-e808f1b31691",
                "fe1e7cf0-aefd-4ae6-a804-5763f0e80087"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "b995c94f-3064-45ff-8783-4b52838ecb61",
          "title": "Tests for user_data functions",
          "fullFile": "/usr/src/app/server/test/user_data.test.js",
          "file": "/test/user_data.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"before each\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "5e7e1b64-8d61-415e-bd06-3754f2a75f63",
              "parentUUID": "b995c94f-3064-45ff-8783-4b52838ecb61",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"after all\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "3cfcf460-10b0-4eec-ad3f-d36d5be50e8a",
              "parentUUID": "b995c94f-3064-45ff-8783-4b52838ecb61",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fd3d22fd-bc01-4d4c-a171-921ea4cd72be",
              "title": "Testing the loadUserDataOnStart function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing an empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing an empty folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(0);",
                  "err": {},
                  "uuid": "f4a94271-ad9b-416a-89cd-1d7a38eae8b9",
                  "parentUUID": "fd3d22fd-bc01-4d4c-a171-921ea4cd72be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-empty folder",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nconst users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(2);",
                  "err": {},
                  "uuid": "ac39cbd9-6e23-4b2b-a896-821506ae6e4b",
                  "parentUUID": "fd3d22fd-bc01-4d4c-a171-921ea4cd72be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-existent folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-existent folder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(\"nonExistentFolder\");\nexpect(users).to.equal(null);",
                  "err": {},
                  "uuid": "080b17a0-af25-454c-a3f3-e4e0818557e7",
                  "parentUUID": "fd3d22fd-bc01-4d4c-a171-921ea4cd72be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null or missing folder param",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing null or missing folder param",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart();\nexpect(users).to.equal(null);\nconst users2 = udata.loadUserDataOnStart(null);\nexpect(users2).to.equal(null);",
                  "err": {},
                  "uuid": "34152e6b-bcf1-4ef4-82af-6c306511bc2a",
                  "parentUUID": "fd3d22fd-bc01-4d4c-a171-921ea4cd72be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4a94271-ad9b-416a-89cd-1d7a38eae8b9",
                "ac39cbd9-6e23-4b2b-a896-821506ae6e4b",
                "080b17a0-af25-454c-a3f3-e4e0818557e7",
                "34152e6b-bcf1-4ef4-82af-6c306511bc2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
              "title": "Testing the initializeUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initializing an existing user",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing an existing user",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "0991fe66-b107-4169-8117-33fbecf3eee7",
                  "parentUUID": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing multiple users",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing multiple users",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nexpect(udata.getUsers().length).to.equal(2);\nexpect(res).to.equal(\"success\");",
                  "err": {},
                  "uuid": "1191a379-b4d2-43e1-b1c8-cbea51449df9",
                  "parentUUID": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null and invalid folder",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null and invalid folder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\", user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "e2462da8-b13e-484a-b115-6af9ddf9b5ac",
                  "parentUUID": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null/missing userid/nickname",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null/missing userid/nickname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\");\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "acbc9225-cf47-4a40-acb7-d7b4bd852590",
                  "parentUUID": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with all null/missing params",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with all null/missing params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile();\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "3141ffce-edbe-4f1d-a955-97b5322407a4",
                  "parentUUID": "966b10a8-f4a5-42ba-b553-6d6fcf6b0ac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0991fe66-b107-4169-8117-33fbecf3eee7",
                "1191a379-b4d2-43e1-b1c8-cbea51449df9",
                "e2462da8-b13e-484a-b115-6af9ddf9b5ac",
                "acbc9225-cf47-4a40-acb7-d7b4bd852590",
                "3141ffce-edbe-4f1d-a955-97b5322407a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "a902b885-32ca-4165-9152-7b7b7483cc8a",
              "title": "Testing the updateUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating an existing user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, correct directory",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "190ff3a1-a2cf-4625-8cf5-1bd881b8420d",
                  "parentUUID": "a902b885-32ca-4165-9152-7b7b7483cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating an existing user, wrong directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, wrong directory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(\"nonExistentFolder\", updatedUser);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "1812eab1-5563-4e5e-aa50-de21ace1593a",
                  "parentUUID": "a902b885-32ca-4165-9152-7b7b7483cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating with null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating with null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateUserDataFile(null, null)).to.equal(null);\nexpect(udata.updateUserDataFile()).to.equal(null);\nexpect(udata.updateUserDataFile(null, user0)).to.equal(null);\nexpect(udata.updateUserDataFile(testFolderName, null)).to.equal(null);",
                  "err": {},
                  "uuid": "5f683423-9fc5-4cc2-bf00-4dbe89f249a6",
                  "parentUUID": "a902b885-32ca-4165-9152-7b7b7483cc8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating non-existent user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating non-existent user, correct directory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "f757756b-cc2c-41be-b5ac-5d2ca06d595a",
                  "parentUUID": "a902b885-32ca-4165-9152-7b7b7483cc8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "190ff3a1-a2cf-4625-8cf5-1bd881b8420d",
                "1812eab1-5563-4e5e-aa50-de21ace1593a",
                "5f683423-9fc5-4cc2-bf00-4dbe89f249a6",
                "f757756b-cc2c-41be-b5ac-5d2ca06d595a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0011bf2e-c8a3-4b71-964e-5a3a4052954f",
              "title": "Testing the updateQuestionScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateQuestionScore(null, null)).to.equal(null);\nexpect(udata.updateQuestionScore()).to.equal(null);\nexpect(udata.updateQuestionScore(null, newQuestionData)).to.equal(null);\nexpect(udata.updateQuestionScore(user0, null)).to.equal(null);",
                  "err": {},
                  "uuid": "ec2f00d9-8bb2-4b37-8735-0888815249ea",
                  "parentUUID": "0011bf2e-c8a3-4b71-964e-5a3a4052954f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, new score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, new score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser = udata.updateQuestionScore(user, newQuestionData)\nexpect(updatedUser.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "4d6e0322-5a33-4d4a-bebc-eab4c31255c7",
                  "parentUUID": "0011bf2e-c8a3-4b71-964e-5a3a4052954f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, lower score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, lower score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataLower);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser1.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "06d01717-0b8d-45e9-b690-25a70767d9c4",
                  "parentUUID": "0011bf2e-c8a3-4b71-964e-5a3a4052954f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, higher score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, higher score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataHigher);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(updatedUser1.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "7f301d61-5ec5-41ed-baa4-a10015f5a5d7",
                  "parentUUID": "0011bf2e-c8a3-4b71-964e-5a3a4052954f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec2f00d9-8bb2-4b37-8735-0888815249ea",
                "4d6e0322-5a33-4d4a-bebc-eab4c31255c7",
                "06d01717-0b8d-45e9-b690-25a70767d9c4",
                "7f301d61-5ec5-41ed-baa4-a10015f5a5d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "82a50013-d0fc-4287-a1e3-dc32871528da",
              "title": "Testing the updatedUserFileWithNewScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updatedUserFileWithNewScore(testFolderName, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(\"nonExistentFolder\", null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, user0.user_id, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, user0.user_id)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore()).to.equal(null);",
                  "err": {},
                  "uuid": "6ea64e9f-6723-46ed-bed9-c1e9f9cb55bc",
                  "parentUUID": "82a50013-d0fc-4287-a1e3-dc32871528da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for a new question",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for a new question",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "bf018248-1598-4f58-893d-897f5ef15868",
                  "parentUUID": "82a50013-d0fc-4287-a1e3-dc32871528da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with lower score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with lower score",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataLower);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "ae5f0c21-d50d-4ccb-908a-1cc161384b21",
                  "parentUUID": "82a50013-d0fc-4287-a1e3-dc32871528da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with higher score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with higher score",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataHigher);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(user.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "27e2417f-0562-41a1-bb3e-02ca9a4cd60b",
                  "parentUUID": "82a50013-d0fc-4287-a1e3-dc32871528da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for multiple questions",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for multiple questions",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, diffQuestionData);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.questions_solved[diffQuestionData.qid]).to.equal(diffQuestionData.score);\nexpect(user.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "39ab0261-807a-4e39-9c7c-ad882c15ea1f",
                  "parentUUID": "82a50013-d0fc-4287-a1e3-dc32871528da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ea64e9f-6723-46ed-bed9-c1e9f9cb55bc",
                "bf018248-1598-4f58-893d-897f5ef15868",
                "ae5f0c21-d50d-4ccb-908a-1cc161384b21",
                "27e2417f-0562-41a1-bb3e-02ca9a4cd60b",
                "39ab0261-807a-4e39-9c7c-ad882c15ea1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.5.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}